#!/usr/bin/stap

# Uses alias suffixes to track time intervals for a subset of kernel
# functions. Based on func_time_stats.stp.

global start, intervals, total_intervals

# We can apply a suffix to multiple probe points designated by one alias:
probe miscellany = syscall.open, syscall.close, syscall.read, syscall.write, vm.mmap { }

probe miscellany {
      start[name, tid()] = gettimeofday_us()
}

# The 'return' suffix is passed on to each of the underlying probe points:
probe miscellany.return {
      t = gettimeofday_us(); old_t = start[name, tid()]
      if (old_t) {
        intervals[name] <<< t - old_t;
        total_intervals[name] <<< t - old_t;
      }
      delete start[name, tid()]
}

probe begin {
      printf("Collecting data... press Ctrl-C to stop.\n")
}

probe end {
      foreach (name in intervals) {
              printf("intervals for %s -- min:%dus avg:%dus max:%dus count:%d\n",
                     name, @min(intervals[name]), @avg(intervals[name]), @max(intervals[name]), @count(intervals[name]))
              print(@hist_log(intervals[name]))
      }
}

function print_log() {
    foreach (name in intervals) {
        printf("intervals for %s -- min:%dus avg:%dus max:%dus count:%d\n",
            name, @min(intervals[name]), @avg(intervals[name]), @max(intervals[name]), @count(intervals[name]))
        print(@hist_log(intervals[name]))
    }
    delete intervals
}

probe timer.s(5) {
    print_log()
    printf("%60s\n", "***************<>***************");
}

probe end {
    printf("\nTotal Result:\n")
    foreach (name in total_intervals) {
        printf("intervals for %s -- min:%dus avg:%dus max:%dus count:%d\n",
            name, @min(total_intervals[name]), @avg(total_intervals[name]), @max(total_intervals[name]), @count(total_intervals[name]))
        print(@hist_log(total_intervals[name]))
    }
    delete total_intervals
}